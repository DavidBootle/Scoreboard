#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config() // configure environment variables
var app = require('../app');
var debug = require('debug')('precdc-scoreboard-node:server');
var fs = require('fs')
var https = require('https');
var express = require('express');
var bcrypt = require('bcrypt');

/**
 * Read certs
 */
const key = fs.readFileSync('./key.pem')
const cert = fs.readFileSync('./cert.pem')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '443');
app.set('port', port);


/**
 * Check master user exists
 */

if (process.env.MASTER_USER == undefined || process.env.MASTER_PASSWORD == undefined) {
  throw Error('Master user must be defined!')
}

const MASTER_USER = process.env.MASTER_USER;
const MASTER_PASSWORD = process.env.MASTER_PASSWORD;

/**
 * Setup and check database
 */

var MongoClient = require('mongodb').MongoClient;

var url = process.env.DATABASE_URL || "mongodb://localhost:27017/";
app.set('databaseUrl', url);

var client = new MongoClient(url);

async function setupDatabase() {
  try {
    await client.connect();

    // establish and verify connection
    await client.db('scoreboard').command({ ping : 1 });
    console.log('Connected to database!');

    console.log('Creating master user...')
    var hashedPassword = await bcrypt.hash(MASTER_PASSWORD, 10)

    var masterUserObject = {
      username: MASTER_USER,
      password: hashedPassword,
      accountType: 'master'
    }

    // check if a master user is in database
    var users = client.db('scoreboard').collection('users')
    var result = await users.updateOne({'accountType': 'master'}, { $set: masterUserObject}, {upsert: true})

    if (result.modifiedCount == 0) {
      throw Error('Could not update master user')
    }
    
    console.log('Master user created.')
  }
  finally {
    await client.close();
  }
}

setupDatabase().catch(console.dir);

/**
 * Create HTTPS server.
 */

var server = https.createServer({key: key, cert: cert}, app);

/**
 * Create HTTP server.
 */
var http = express()
http.get('*', function (req, res) {
  res.redirect('https://' + req.headers.host + req.url)
})
http.listen(80)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}